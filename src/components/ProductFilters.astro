---
import { Icon } from "astro-icon/components";
import { coerce } from "astro:schema";

//! TODO: obtener las categorías de la base de datos
// Van a ser Audifonos, Parlantes, Cargadores, etc
// Ver como hacer para que cuando busquen parlante, bafle, altavos y similares, aparezcan en la lista los mismos
const categories = [
  "Audio",
  "Wearables",
  "Computadoras",
  "Accesorios",
  "Gaming",
  "Otros",
];

let maxPrice = 1500;
let minPrice = 0;

// 2. DESTRUCTURING DE PROPS (Obtener datos del padre)
const {
  activeCategory,
  activePriceMax,
  priceRange = { min: 0, max: 1500 }, // Con valor por defecto para evitar el TypeError
} = Astro.props;

/**
 * Función para construir la URL de destino al hacer clic en un filtro de categoría.
 * Garantiza que se añade o se elimina el parámetro 'category' del path.
 * @param category La categoría seleccionada, o null para "Mostrar Todas".
 * @returns El string completo del path (ej: "/productos?category=Audio")
 */
const buildCategoryPath = (category: string | null): string => {
  // Obtener la URL base
  const url = new URL(Astro.url.pathname, Astro.url.origin);

  const categoryString = category || "all";

  if (categoryString === "all" || categoryString === null) {
    // Si es "Todas las Categorías", borra el parámetro de búsqueda 'category'
    url.searchParams.delete("category");
  } else {
    // Si es una categoría específica, establece el parámetro
    url.searchParams.set("category", categoryString);
  }
  console.log(url);
  // IMPORTANTE: Devuelve el string del path completo (ruta + parámetros) para el HREF
  return `${url.pathname}${url.search}`;
};
---

<aside
  class="w-full lg:w-1/4 p-4 lg:sticky lg:top-[90px] h-fit bg-gray-50 rounded-xl shadow-lg border border-gray-200"
>
  <h3 class="text-xl font-bold mb-4 text-gray-800 flex items-center gap-2">
    <Icon name="mdi:filter-outline" class="w-6 h-6" />
    Filtros
  </h3>

  <!-- Filtro 1: Categoría -->
  <div class="mb-6">
    <p class="font-semibold text-gray-700 mb-2">Categoría</p>
    <ul class="space-y-1 text-sm">
      <li>
        <a
          href={buildCategoryPath(null)}
          class="text-gray-600 hover:text-primary transition-colors cursor-pointer"
        >
          Todas las Categorías
        </a>
      </li>
      {
        //! TODO: Traer el número de productos de cada categoría
        categories.map((category) => (
          <li>
            <a
              href={buildCategoryPath(category)}
              class="text-gray-600 hover:text-primary transition-colors cursor-pointer"
            >
              {category} (#)
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <!-- Filtro 2: Precio (Se recomienda usar un componente de framework para interacción dinámica) -->
  <div class="mb-6">
    <p class="font-semibold text-gray-700 mb-2">Rango de Precio</p>
    <input
      type="range"
      class="w-full h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer range-lg"
      min="0"
      max="1500"
      value="750"
    />
    <div class="flex justify-between text-xs text-gray-600 mt-1">
      <span>${minPrice}</span>
      <span>${maxPrice}</span>
    </div>
  </div>

  <!-- Botón de Acción -->
  <button
    class="w-full py-2 bg-primary text-white font-medium rounded-lg hover:bg-opacity-90 transition-opacity cursor-pointer"
  >
    Aplicar Filtros
  </button>
</aside>
